# Quy tr√¨nh l√†m vi·ªác ƒë·ªÉ ki·ªÉm tra, x√¢y d·ª±ng v√† ki·ªÉm th·ª≠ d·ª± √°n Node.js
# C√†i ƒë·∫∑t dependencies, l∆∞u cache, ki·ªÉm tra m√£, x√¢y d·ª±ng v√† ch·∫°y ki·ªÉm th·ª≠ tr√™n nhi·ªÅu phi√™n b·∫£n Node.js
# Tham kh·∫£o: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # C√°c phi√™n b·∫£n Node.js ƒë∆∞·ª£c h·ªó tr·ª£: https://nodejs.org/en/about/releases/
      fail-fast: false # Ti·∫øp t·ª•c ki·ªÉm th·ª≠ c√°c phi√™n b·∫£n kh√°c n·∫øu m·ªôt phi√™n b·∫£n th·∫•t b·∫°i
      max-parallel: 3 # Gi·ªõi h·∫°n s·ªë job ch·∫°y ƒë·ªìng th·ªùi ƒë·ªÉ t·ªëi ∆∞u t√†i nguy√™n

    steps:
      # L·∫•y m√£ ngu·ªìn t·ª´ kho l∆∞u tr·ªØ
      - name: L·∫•y m√£ ngu·ªìn
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # L·∫•y to√†n b·ªô l·ªãch s·ª≠ ƒë·ªÉ h·ªó tr·ª£ ki·ªÉm tra thay ƒë·ªïi

      # Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng Node.js
      - name: Thi·∫øt l·∫≠p Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm' # L∆∞u cache dependencies npm ƒë·ªÉ tƒÉng t·ªëc

      # Kh√¥i ph·ª•c cache npm n·∫øu c√≥
      - name: Kh√¥i ph·ª•c cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # C√†i ƒë·∫∑t dependencies
      - name: C√†i ƒë·∫∑t dependencies
        run: npm ci # S·ª≠ d·ª•ng npm ci ƒë·ªÉ c√†i ƒë·∫∑t s·∫°ch v√† ƒë·ªìng nh·∫•t

      # Ki·ªÉm tra m√£ b·∫±ng linter
      - name: Ki·ªÉm tra m√£
        run: npm run lint # Gi·∫£ ƒë·ªãnh d·ª± √°n c√≥ script lint (nh∆∞ ESLint)
        continue-on-error: true # Ti·∫øp t·ª•c n·∫øu lint c√≥ c·∫£nh b√°o, nh∆∞ng v·∫´n b√°o l·ªói chi ti·∫øt

      # X√¢y d·ª±ng d·ª± √°n v·ªõi ghi log chi ti·∫øt
      - name: X√¢y d·ª±ng
        run: npm run build -- --verbose # B·∫≠t ch·∫ø ƒë·ªô ghi log chi ti·∫øt cho build
        env:
          NODE_ENV: production # ƒê·∫£m b·∫£o build ·ªü ch·∫ø ƒë·ªô production

      # Ch·∫°y ki·ªÉm th·ª≠ v·ªõi chi ti·∫øt l·ªói
      - name: Ch·∫°y ki·ªÉm th·ª≠
        run: npm test -- --verbose # B·∫≠t ch·∫ø ƒë·ªô ghi log chi ti·∫øt cho ki·ªÉm th·ª≠
        env:
          NODE_ENV: test
        continue-on-error: false # D·ª´ng n·∫øu ki·ªÉm th·ª≠ th·∫•t b·∫°i

      # Hi·ªÉn th·ªã chi ti·∫øt l·ªói n·∫øu c√≥ b∆∞·ªõc th·∫•t b·∫°i
      - name: Hi·ªÉn th·ªã chi ti·∫øt l·ªói
        if: failure() # Ch·ªâ ch·∫°y n·∫øu c√°c b∆∞·ªõc tr∆∞·ªõc th·∫•t b·∫°i
        run: |
          echo "Ki·ªÉm tra c√°c file log l·ªói..."
          find . -type f \( -name "*.log" -o -name "error.log" -o -name "build.log" \) -exec cat {} \; || echo "Kh√¥ng t√¨m th·∫•y file log"
          echo "Li·ªát k√™ c√°c file trong th∆∞ m·ª•c build (n·∫øu c√≥)..."
          ls -la dist/ || echo "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c dist/"

      # T·∫£i l√™n artifact (log v√† th∆∞ m·ª•c build)
      - name: T·∫£i l√™n artifact
        if: always() # Ch·∫°y k·ªÉ c·∫£ khi c√≥ b∆∞·ªõc th·∫•t b·∫°i
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.node-version }}
          path: |
            **/*.log
            dist/
          retention-days: 7 # L∆∞u artifact trong 7 ng√†y

      # Comment v√†o PR n·∫øu pipeline th·∫•t b·∫°i (t√πy ch·ªçn)
      - name: Comment v√†o PR n·∫øu th·∫•t b·∫°i
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üö® Pipeline th·∫•t b·∫°i cho Node.js v${{ matrix.node-version }}. Vui l√≤ng ki·ªÉm tra log v√† artifact ƒë·ªÉ bi·∫øt chi ti·∫øt.`
            })